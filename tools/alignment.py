import numpy as np
import matplotlib.pyplot as plt

plt.rcParams.update({'font.size': 16})
plt.rcParams['figure.figsize'] = [12, 6]
# Takes in information
file2 = "test.fas"
file1 = "test2.fas"
gp = -1  # Gap penalty
mp = -1  # Mismatch penalty
ms = 2  # Match score

# File processing
# f1 = open(file1)
# f2 = open(file2)
# gene1 = f1.readline()
# gene2 = f2.readline()
# data1 = f1.read()
# data2 = f2.read()
data1 = "CGGAGGGACAGCGGGGTCACCGAGACCTTCACGTGGTCCGGGCCGCAAGGGAGTTCAAGTGCCGGAGGCCCGGAAAAGGATCGCGCTGGCCAGGAAGTTTTGCCCGGTGTCCCCGCAGCCTCGGCAGCGGCCCCACGGGGACTCGCCGCCCATGGCCGCGTGGCCGCCGCACGGAGGCGGGTGAGGCGCGGGGACGCGCGCTCCGAGCCCGGGGGACGCGCGGGCGCGGCGCGGAGATGGGCCCGCGAGCGCGGCGCGCGCTGCTCCTGCTGTTCCTGCCGTTCCTGCCGTTCCTGCTGCGGACCGGGGCTGCGCACCCGCGGCCGCCGCGGTCCCACTCCCTGAGCTACCTCTTCATGGGCGCCTCAGTGCCAGACCTTGGGCTGCCCCTGTTCGAGGCCTTGGGCTACGTGGACGACCAGCTGTTCGTGTCCTACAATCACGAGAGTCGCAGGGCGGAGCCCCGCGCCCAGTGGCTCGAGGATGGGGCCCCCAGCCAGCTGTGGCTACAGCTGAGTCAGAGCCTGAAAGGGTGGGATCACATGTTCATCGTGGACTTCTGGACCATCATGGACAACCACAACCACAGCAAGGTAACAAAGCTCGGGGTGTCGTCAGAGTCCCACACGCTGCAAGTGATCCTGGGCTGTGAGGTGCGAGAGGACAACAGCACCAGGGGCTTCTGGAACTACGGCTACGACGGGCAGAACTACCTTGAATTCCGCCCTGAGACGCTGGACTGGAGGGCTGCAGAGCCCAGGGCCTGGGCCACGAAGCTGGAGTGGGAAGTGAACGCGATTCGGGCCAAACAGAACAGGGCCTACCTGGAGAGGGACTGTCCCGTGCAGCTGCAGAGTTTGCTGGCGCTGGGGACAGGGGTTCTGGACCGGCAAGTGCCTCCCTTGCTGAAGGTGACTCATCATGTGGCCTCTGCAGTGACCACTCTACGGTGTCAGGCTCTGAACTTCTACCCCCAGAACATCACCATGAGGTGGCTGAAGGACAGGAGGCCACTGGAGGCCAAGGACGTTGAGCCTCAGGACGTGCTGCCCAACGGGGACGGGACCTACCAGGGCTGGTTGGCCGTGGCCGTGCCTCCCGGGGAAGAGCACAGATACACCTGCCTGGTGGAGCACCCGGGGCTAAACCAGCCCCTCGCTGCCACGTGGGAGCCGTCGGTGCCCAGCACCCTGGTCATTGGAGCCATCAGTGGGATCGCTGTTTGTGTCATCCTCTTTGTTATTGGAGTTCTGTTCCGAATCTTCAGGAAAAGGCAGGCTTCGAGAGGAGCCATGGGGGACTACGTGTTGGCCGAATGTGAGTGACAGGCAGCCTGGGACCTCTCGTGGGAGGAGACGTGGAGACTGAAAGAGAGGGCGCCCTGGGGCCTTCTTTGCTTCCAGGACTGAGTCGGACCTAACAAGTAGGAAGCCACCGAGGAACTCTCTGCTTGCGGCCTTCCCCGTTCATTCTCAAAAAGTTTCTCTCATTTAGGTTTTTGAGTTCCTGCGCCTCTCCGGAACCGGCTCTCCGGAATCTCCAGCCGCCTCTAGGGTCTGCCTTATTTTCTGCACCATTTCGGACTCTGTATACCTATGGCCTCTCCTCTCCCACCTCTGGAATAGGGCTCCTAAAATTTTGGGGGGCTCACAGTTCCTTTCAACATCTGAGAAAAACCATGAACTTTCCCCTTGGGACATGGGAGTCTCAGACCCTTACCAGAATTTTGCGCACACATCCCGGCATTTTCTAGACCCATCCAAGTTTCCTTTTGACCCCCTGCCCTCTCTGTTATCCAGCAATTCACCTGCCACCAAGCCCTGTGGTCTTTTCCACCAGAGGTTGAAGTGGGTCACTGTACAGCCGTGAAGGCCGTGCACTGCACAACCCAAGGAGGCCCATTTCCCAGAAGGGCTCTCAGGCGTGGATGTTTGTGTCCTGTGATAGTTTTCCAGAAAGTGGGTGGGAAGTGTCTTGACGAGGGGCATCTTTTTTCTAATTGGCAAAAAAGTGTCATATAGGTTTCTGTATAGGAATGATTTACGTGAAGGCGTCTACGATGCCTCTGGGATATGCCAGAGTTGAAGGAACACGGTAATTTCCCACTTGGTCTCAGATGCTGTGAAGTGATAATGAAAATGAAAATGAGGAGGAGGAGGAGGAGGAAGAGGAGGAAGAGGATAAGGGGGGGGGGATTTACTTGCTGCCAGACTGAGTTCTGAGACCTCCTGACGCGCGTTATCTCATACAATTCTTACAATAATTGTTTCATGTTAGCACTATTATCCTCATATTTTTTTAGATGAAGTAAATGTATCCCCGGGCTGCCAGGGAGAGAGGCAGGTTTCAGCCTCTGTCGGATTCTGATCCCTGTCCCGCACCAGTGCATTCAGGCGGTTTAGACGTCGCCCAGGAAATGGAGAAGGGGGGGGGGGGGGACGGCTCTTCCTGTCTGTCTCGGTGTCTTTACTCTCAGTGAGCTGGATGGAAATGAAGGGGAAACAGCAGAAAATCATCTCAACCACGTTTCCTTTCAAAGTCTCTGGGGAAAGCACTCCACCCCCCATCTGCTCTGTCTGGCATCGCTCCCGGGCCCCCAGGTCAGGGCTGTCATTGCTGGTGTCAGCCTGTCGCCGTGTTGGACCTCACGGTGTTTGGCCTCTGCCGGGGCCACCAGAGTCACAACGCCGGTGGCATTTCCCCCCCAAGAACCGGAGCAACCCTTGTCATATGAAGGATGGCAAAAACGGGGGCCCGGGGGGTTAAGCGTCTGACTCTTGGTTTCGGCTCAGGTCATGATCTCGTGGTTCGGGAGTTCAAGCCCCACGTCGGACCCGGGGCTGACAGCGCGGAGCCTGCT"
data2 = "TTCAAGTGCCAGAGGCCCGGAAAAGGATCGCGCTGGCCAGGAAGTTTTGCCGCGTGTCCCCGCAGCCTCGGCAGAGGCCCCACGGGGACTCGCCGCCCATGGCCGCGTGGCCGCCGCACGGAGGCGGGTGAGGCGCGGGGACGCGCGCTCCGAGCCCGGGGGACGCGCGGGCGCGGCGCGGAGATGGGCCCGCGAGCGCGGCGCGCGCTGCTCCTGCTGTTCCTGCCGTTCCTGCTGTTCCTGCTGCGGACCGGGGCTGCGCACCGGCGGCCGCCGCGGTCCCACTCCCTGAGCTACCTCTTCATGGGCGCCTCAGTGCCAGACCTTGGGCTGCCCCTGTTCGAGGCCTTGGGCTACGTGGACGACCAGCTGTTCGTGTCCTACAATCACGAGAGTCGCCGGGCAGAGCCCCGCGCCCAGTGGCTCGAGGGTAGGGCCCCCAGCCAGCTGTGGCTGCAGCTGAGTCAGAGCCTGAAAGGGTGGGATCACATGTTCATCGTGGACTTCTGGACCATCATGGACAACCACAACCACAGCAAGGTAACAAAGCTCGGGGTGTCGTCAGAGTCCCACACGCTGCAAGTGATCCTGGGCTGTGAGGTGCGAGAGGACAACAGCACCAGGGGCTTCTGGAAGTACGGCTACGACGGGCAGAGCTACCTTGAATTCCGCCCTGAGACGCCGGACTGGAGGGCAGCAGAGCCCAGGGCCTGGGCCACCAAGCTGGAGTGGGAAGCGAGCACGATTCGGGCCAAACAGAACAGGGCCTACCTGGAGAGGGACTGTCCCATGCAGCTGCAGAGTTTGCTGGCGCTGGGGACAGGGGTTCTGGACCGGCAAGTGCCTCCCTTGCTGAAGGTGACCCATCGTGTGGCCTCTGCAGTGACCACTCTACGGTGTCAGGCTCTGAACTTCTACCCCCAGAACATCACCATGAGGTGGCTGAAGGACAGGCGGCCACTGGAGGCCAAGGACGTTGAGCCTCAGGACGTGCTGCCCAACGGGGACGGGACCTACCAGGGCTGGTTGGCCGTGGCCGTGCCTCCCGGGGAAGAGCACAGATACACCTGCCTCGTGGAGCACCCGGGGCTAAACCAGCCCCTCACTGCCATGTGGGAGCCGTCGGTGTCCAGCACCCTGGTCGTTGGAACCATCAGTGGGATCGCTGTTTGTGTCATCCTCTTTGTTATTGGAGTTCTGTTCCGAATCTTCAGGAAAAGGCAGGCTTCGAGAGGAGCCATGGGGGACTACGTGTTGGCCGAATGTGAGTGACAGGCAGCCTGAGACCTCTCATGGGAGGAGACGTGGAGACTGAAAGAGAGGGCGCCCTGGGGCCTTCTTTGCTTCCAGGACTGAGTCGGACCTAACAAGTAGGAAGCTACCGAGGAACTCTCTGCTTGCGGCCTTCCCCGTTCGTTCTCGAAAAGTTTCTCTCATTTAGGTTTTTTGAGTTCCTGCGCCTCTCCGAGAACCGGCTCTCAGGAATCTCCAGCCGCCTCTAGGGTCTGCCTTATTTTCTGCACCACTTCGGACTCCGTATACCTATGGCCTCTCCTCTCCTACCTCTGGAATAGGGCTCCTAAAATTTTGGGGGGCTCACAGTTTCTTTCAACATCTGAGAAAAACCGTGAACTTTCCCGTTGGGACATGGGAGTGTCATACCCTTACCAGAATTTTGCGCACACATCCCGGCATTTTCTAGACCCATCCAAGTTTCCTTTTGACCCCCCGCCCTCTCTTTTATCCAGCAATTCACCTGTCACCAAGCCCTGTGGTCTGTTCCACCAGAGGTTGAAGTGGGTCATTGTACAGTCGTGAAGGCCGTGCACTGCACAACCCAAGGAGGCACATTTCCCAGAAGGGCTGTCAGGCGTGGATGTTTGTGTCCTGTGATAGTTTTCCAGAAAGTGGGTGGGAAGTGTCTTGACGAGGGGCATCTTTTTTTCTAATTGGCAAAAAAGTGTCATATAGGTTTCTGTATAGGAATGATTTACGCGAAGGCATCTACGATGCCTCTGGGATATGCCAGAATTGAAGGAACACGGTAATTTCCCACTTGGTCTCAGAGGCTATGAAGTGATAATGAAAATGAAAATAAGGATGAGGAGGAGGAGGAGGAAGAGGATAACGTGGGGGGATTTACTTGCTGCCAGACTGAGTTCTGAGACCTACCGACGCGCGTTATCTCATACAATTCTTACAATAATTGTTTCATGTTAGTACTATTATCCTCATGTTTTTTTAGATGAAGTAAATGAAGTACAGAGCATCCCCGGCCTGCCAGGGAGAGAGGCAGGTTTCAGCCTCTGTCGGATTCTGATCCCTGTCCCGCACCAGTGCATTCAGGCGGTTTAGACGTCGCCCAGGAAATGGAGAAGGGAGGGGGTGGGGGGCGGCGGGAGACGGCTCTTCCTGTCTCGGTGTCTTTACTCTTAGTGAGCTGGATGGAAATGAAGGGAAACAGCAGAAAATCTTCTCAACCTCGTTTCCTTTCAAAGTCTCTGGGGAAAGCACTCCACCCCCCCACCTGCTCTGTCTGGCATCGCTCCCGGGCCCCCAAGTCAGGGCTGTCATTGCTGGTGTCAGCCTGTCGCCGTGTTGGACCTCACGGTGTTTGCCCTCTGCCGGGGCCACCAGAGTCACAACGCCGGTGGCATTTCCCCTCCAAGAACCCGAGCAACCCTTGTCATATGAAGGATGG"
data2 = "CTAAAATTCTGAAAGACCTGTTGCTTTTCTCCAGGAAGTTTTACTGGGCATCTCCTGAGCCTAGGCAATAGCTGTAGGGTGACTTCTGGAGCCATCTCCGTTTCCCCGCCCCCCAAAAGAAGCGTAGATTTAACGGGGACGTGCGGCCAGAGCTGGGGAAATGGGCCCGCGAGCCAGGCCGGCGCTTCTCCTCCTGATGCTTTTGCAGACCGCGGTCCTGCAGGGGCGCTTGCTGCGTTCACACTCTCTGCACTACCTCTTCATGGGTGCCTCAGAGCAGGACCTTGGTCTTTCCTTGTTTGAAGCTTTGGGCTACGTGGATGACCAGCTGTTCGTGTTCTATGATCATGAGAGTCGCCGTGTGGAGCCTCGAACTCCATGGGTTTCCAGTAGAATTTCAAGCCAGGTGTGGCTGCAGCTGAGTCAGAGTCTGAAAGGGTGGGATCACATGTTCACTGTTGACTTCTGGACTATTATGGAAAATCACAATCACAGCAAGGAGTCCCACACCCTGCAGGTCATCCTGGGCTGTGAAATGCAAGAAGACAACAGTACCGAGGGCTACTGGAAGTACGGGTACGATGGGCAGGACCACCTTGAATTCTGCCCTGACACGCTGGATTGGAGAGCAGCAGAACCCAGGGCCTGGCCTACCAAGCTGGAGTGGGAAAGGCACAAGATTCGGGCCAGGCAGAACAGGGCCTACCTGGAGAGGGACTGCCCTGCACAGCTGCAGCAGTTGCTGGAGCTGGGGAGAGGTCTTTTGGACCAACAAGTGCCTCCTTTGGTGAAGGTGACACATCATGTGACCTCTTCAGTGACCACTCTACGGTGTCGGGCCTTGAACTACTACCCCCAGAACATCACCATGAAGTGGCTGAAGGATAAGCAGCCAATGGATGCCAAGGAGTTCGAACCTAAAGACGTATTGCCCAATGGGGATGGGACCTACCAGGGCTGGATAACCTTGGCTGTACCCCCTGGGGAAGAGCAGAGATATACGTGCCAGGTGGAGCACCCAGGCCTGGATCAGCCCCTCATTGTGATCTGGGAGCCCTCACCGTCTGGCACCCTAGTCATTGGAGTCATCAGTGGAATTGCTGTTTTTTTCGTAATCTTGTTCATTGGAATTTTGTTCATAATATTAAGGAAGAGGCAGGGTTCAAGAGGAGCCATGGGGCACTACGTCTTAGCTGAACGTGAGTGACACGCAGCCTGCAGACTCATTGTGGGAAGGAGACAAAACTAGAGACTCAAAAAGGGAGTGCATTTATGAGTTCTTCATGTTTCAGGACAGAGTTGAACCTAAACATAGAAATTGCCTGAAGAACTCCCTGA"
#data1="GTGGGAGGCGGA"
#data2="TGAGAGCGCGG"
data1 = data1.replace("\n", "")
data2 = data2.replace("\n", "")
data1 = data1.replace(" ", "")
data2 = data2.replace(" ", "")
len1 = len(data1)
len2 = len(data2)
scoreMatrix = np.zeros((len1+1, len2+1))

for i in range(1, len1+1):
    for j in range(1, len2+1):
        posibilities = np.array([scoreMatrix[i, j-1]+gp])
        posibilities = np.append(posibilities, [scoreMatrix[i-1, j]+gp])
        if data1[i-1] == data2[j-1]:
            posibilities = np.append(
            posibilities, [scoreMatrix[i-1][j-1]+ms])
        else:
            posibilities = np.append(
            posibilities, [scoreMatrix[i-1][j-1]+mp])
        posibilities = np.append(posibilities, [0])
        scoreMatrix[i, j] = posibilities.max()

print(scoreMatrix)
plt.imshow(scoreMatrix, cmap = "Reds")
plt.colorbar()
start = np.unravel_index(scoreMatrix.argmax(), scoreMatrix.shape)
#top = data1[start[0]-1]
#bottom = data2[start[1]-1]
top = ""
bottom = ""
position = np.array(start)


skips1 = 0
skips2 = 0
longestSkipstretch1= 0
longestSkipstretch2 = 0
mismatchArray = np.empty(16)
mismatchArray = np.resize(mismatchArray, [4,4])

skipStretch1=0
longestSkipStretch1=0
skipStretch2=0
longestSkipStretch2=0

while scoreMatrix[position[0], position[1]] != 0:
    options = np.array([scoreMatrix[position[0]-1, position[1]]])
    options = np.append(options, scoreMatrix[position[0], position[1]-1])
    options = np.append(options, scoreMatrix[position[0]-1, position[1]-1])
    
    ##Which squares could it have come from
    legal = [False, False, False]
    if ((options[2]==scoreMatrix[position[0], position[1]]-ms)or(options[2]==scoreMatrix[position[0], position[1]]-mp)):
        legal[2]=True
    if (options[1] == scoreMatrix[position[0],position[1]]-gp):
        legal[1]=True
    if (options[0] == scoreMatrix[position[0],position[1]]-gp):
        legal[0]=True
    
    #Which is best
    choices = np.empty(3)
    for x in range(2):
        if legal[x]:
            choices[x]=options[x]
        else:
            choices[x]=0
    choice = np.argmax(choices)

    ##Record added base
    if(choice==0):
        top = data1[position[0]-1] + top
        bottom = "-" + bottom
        position = [position[0]-1, position[1]]
        skips2 = skips2+1
        skipStretch2 = skipStretch2+1
    if(choice==1):
        bottom = data2[position[1]-1] + bottom
        top = "-" + top
        position = [position[0], position[1]-1]
        skips1 = skips1 + 1
        skipStretch1 = skipStretch1+1
    if(choice==2):
        top = data1[position[0]-1] + top
        bottom = data2[position[1]-1] + bottom
        position = [position[0]-1, position[1]-1]
        skipStretch1 = 0
        skipStretch2 = 0
        if(data1[position[0]-1]=="A"): k = 0
        if(data1[position[0]-1]=="C"): k = 1
        if(data1[position[0]-1]=="G"): k = 2
        if(data1[position[0]-1]=="T"): k = 3
        if(data2[position[1]-1]=="A"): l = 0
        if(data2[position[1]-1]=="C"): l = 1
        if(data2[position[1]-1]=="G"): l = 2
        if(data2[position[1]-1]=="T"): l = 3
        mismatchArray[k,l] = mismatchArray[k,l]+1


    if(skipStretch1>longestSkipStretch1):
        longestSkipStretch1=skipStretch1
    if(skipStretch2>longestSkipStretch2):
        longestSkipStretch2=skipStretch2
    """
    print("SCORE: " + str(scoreMatrix[position[0],position[1]]))
    print("Match: " + str(scoreMatrix[position[0], position[1]]-ms))
    print("MISMATCH: "+str(scoreMatrix[position[0], position[1]]-mp))
    print("GAP: " + str(scoreMatrix[position[0], position[1]]-gp))
    print("position = " + str(position))
    print(legal)
    print(choices)
    print(choice)
    print("options=" + str(options))
    """
    
overhang1 = len(data1)-(len(top)-skips1)
overhang2 = len(data2)-(len(bottom)-skips2)
fronthang1 = position[0] 
fronthang2 = position[1]
backhang1 = len(data1)-start[0]
backhang2 = len(data2)-start[1]
    

print("TOP:     " + top)
print("BOTTOM:  " + bottom)
print("END: "+ str(position))
print("SKIP1:  "+ str(skips1))
print("SKIP2:  "+ str(skips2))
print("Overhang1: "+ str(overhang1))
print("Fronthang1:  "+ str(fronthang1))
print("Backhang1:  "+ str(backhang1))
print("Overhang2: "+ str(overhang2))
print("Fronthang2:  "+ str(fronthang2))
print("Backhang2:  "+ str(backhang2))
print("Longest Skip Stretch 1:  "+ str(longestSkipStretch1))
print("Longest Skip Stretch 2:  "+ str(longestSkipStretch2))

print(mismatchArray)